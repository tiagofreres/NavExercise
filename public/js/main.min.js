var ajax = function(url, callback){
	var xhr = new XMLHttpRequest();
	xhr.onreadystatechange = executeCallback;
	xhr.open('GET', url, true);
	xhr.send();
	return xhr;

	function executeCallback(){
		if (xhr.readyState === XMLHttpRequest.DONE) callback(xhr);
		else return;
	}
};
(function(){
	"use strict";
	window.onload = init;
	function init(){
		// Init HugeNav
		var nav = HugeNav.getInstance();
		nav.itemTmpl = document.getElementById('item-tmpl').innerHTML.trim();
		nav.menuTmpl = document.getElementById('menu-tmpl').innerHTML.trim();
		nav.parentDom = document.getElementById('menu');
		nav.toggleButton = document.getElementById('nav-toggle');
		nav.menuDom = document.getElementById('menu');
		nav.navAccessDom = document.getElementById('access-nav');
		nav.mainDom = document.getElementById('main');
		nav.maskDom = document.getElementById('mask');
		HugeNav.init();
	}
})();


var HugeNav = (function(){
	"use strict";

	// Constructor
	var HugeNav = function(){
		this.dataEndpoint = "/api/nav.json";
		this.data = {};
		this.parentDom = document.body;
		this.toggleButton = null;
		this.menuDom = null;
		this.navAccessDom = null;
		this.mainDom = null;
		this.maskDom = null;

		// Primary Navigation Node element that controls a Secondary Navigation 
		this.primaryNav = null;

		this.menuTmpl = "{{:classname}}";
		this.itemTmpl = "{{:classname}}";
		this.chevron = '<i class="chevron"></i>';

		this.primaryNavPrefix = "primer-";
		this.secondaryNavPrefix = "sec-";
		this.menuClassname = "menu";
		this.menuItemClassname = "menu-item";

		this.menuOpened = false;
		this.dataLoaded = false;
		this.menuBuilt = false;
		this.secondaryNavOpened = false;
	};

	// Public methods
	HugeNav.prototype.callback = callback;
	HugeNav.prototype.loadData = loadData;
	HugeNav.prototype.setData = setData;
	HugeNav.prototype.setItemTemplate = setItemTemplate;
	HugeNav.prototype.setMenuTemplate = setMenuTemplate;
	HugeNav.prototype.buildMenu = buildMenu;
	HugeNav.prototype.getClassname = getClassname;
	HugeNav.prototype._buildMenuFragment = _buildMenuFragment;
	HugeNav.prototype.setParentDom = setParentDom;
	HugeNav.prototype.unserialize = unserialize;

	// Static
	HugeNav.PRIMARY_NAV = 1;
	HugeNav.SECONDARY_NAV = 2;
	HugeNav.MENU_ITEM = 1;
	HugeNav.MENU_ITEM_ELEM = 2;

	// Singleton
	HugeNav.instance = null;
	HugeNav.getInstance = getInstance;

	// Static
	HugeNav.toggleEventHandler = toggleEventHandler;
	HugeNav.toggleNav = toggleNav;

	// Init
	HugeNav.init = init;

	return HugeNav;

	////////////////////

	function getInstance(){
		if (HugeNav.instance === null) HugeNav.instance = new HugeNav();
		return HugeNav.instance;
	}

	function callback(xhr){
		var nav = HugeNav.getInstance();
		nav.data = JSON.parse(xhr.responseText);
		nav.buildMenu();
	};

	function loadData(){
		if (!!ajax) {
			ajax(this.dataEndpoint, this.callback);
			return true;
		}
		else {
			throw new Error("ajax is not present.");
			return false;
		}
	};

	function setData(data){
		this.data = data;
	}

	function setItemTemplate(tmpl){
		this.itemTmpl = tmpl;
	}

	function setMenuTemplate(tmpl){
		this.menuTmpl = tmpl;
	}

	function setParentDom(parent){
		this.parentDom = parent;
	}

	function buildMenu(){
		"use strict";
		if (!this.dataLoaded) {
			this.loadData();
		}
		else {
			var menu = this._buildMenuFragment(this.data.items, HugeNav.PRIMARY_NAV);
			this.parentDom.innerHTML = menu + 
				'<div id="copyright">Â©2014 Huge. All Rights Reserved.</div>';
			this.menuBuilt = true;
		}
	}

	function _buildMenuFragment(items, navType) {
		var menu = "",
				menuClassname = this.getClassname(HugeNav.MENU_ELEM, navType),
				list = "";

		if (navType === HugeNav.PRIMARY_NAV) {}
		else if (navType === HugeNav.SECONDARY_NAV) {}
		else throw new Error("Invalid navType");
		
		items.forEach(function(item){
			var data = item;
			data["classname"] = this.getClassname(HugeNav.MENU_ITEM_ELEM, navType);
			data["url"] = !!item.url ? item.url : "#";
			if (item.items && item.items.length > 0) {
				data["menu"] = this._buildMenuFragment(item.items, HugeNav.SECONDARY_NAV);
				data["chevron"] = this.chevron;
			}
			else {
				data["menu"] = "";
				data["chevron"] = "";
			}
			list += render(this.itemTmpl, data);
		}, this);

		menu = render(this.menuTmpl, {"classname":menuClassname, "list":list});

		return menu;
	}

	function getClassname(navElem, navType){
		var classname = "", prefix = "";
		switch (navElem) {
			case (HugeNav.MENU_ELEM):
				classname = this.menuClassname;
				break;
			case (HugeNav.MENU_ITEM_ELEM):
				classname = this.menuItemClassname;
				break;
		}
		switch (navType) {
			case (HugeNav.PRIMARY_NAV):
				prefix = this.primaryNavPrefix;
				break;
			case (HugeNav.SECONDARY_NAV):
				prefix = this.secondaryNavPrefix;
				break;
		}
		return prefix + classname;
	}

	function toggleEventHandler(){
		var nav = HugeNav.getInstance();
		nav.menuOpened = !nav.menuOpened;
		nav.unserialize();
	}

	function toggleNav(elem){
		var nav = HugeNav.getInstance(),
				node = elem.parentNode;
		if (!node.data) node.data = [];
		if (nav.primaryNav !== null && nav.primaryNav !== node) {
			nav.primaryNav.data["opened"] = false;
			removeOpenClass(nav.primaryNav);
		}
		removeOpenClass(node);
		node.className += !node.data["opened"] ? " open" : "";
		node.data["opened"] = !node.data["opened"];

		nav.primaryNav = node;
		nav.secondaryNavOpened = node.data["opened"];
		nav.unserialize();

		function removeOpenClass(e){
			e.className = e.className.replace(/\s*open\s*/, "");
		}
	}

	function unserialize() {
		this.toggleButton.className = this.menuOpened ? "open" : "";
		this.mainDom.className = this.menuOpened ? "open" : "";
		this.navAccessDom.className = this.menuOpened ? "open" : "";
		this.menuDom.className = this.menuOpened ? "open" : "";
		this.maskDom.className = this.menuOpened || this.secondaryNavOpened 
				? "open" : "";
	}

	function init(){
		var nav = HugeNav.getInstance();
		if (!nav.dataLoaded) nav.dataLoaded = nav.loadData();
		nav.toggleButton.addEventListener('click', HugeNav.toggleEventHandler);
		nav.maskDom.addEventListener('click', HugeNav.toggleEventHandler);
		window.onresize = function(){nav.menuOpened = false; nav.unserialize();};
		nav.unserialize();
		console.dir(nav);
	};
})();
	

var render = function(tmpl, data){
	var regexp = /\{\{:(\w*)\}\}/gm;
	tmpl = tmpl.replace(regexp, function(match, p){
		return data[p];
	});
	return tmpl;
};